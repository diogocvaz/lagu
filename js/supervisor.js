// layer0 - synth/instrum
// layer1 - synth/instrum
// layer2 - low synth/instrum
// layer3 - bass
// layer4 - fx (to be impletemented)
// (?)

import * as auxf from './auxFunctions.js';

var possibleSteps = [8, 16, 32];
var possibleStepsLarge = [32];
var possibleDamps = [0.01, 0.008, 0.006];
var possibleInterval = ['4n'];

var rainForecast = ['Rain', 'Drizzle', 'Thunderstorm', 'Tornado']; 

export function instrumentDecider(layerNumber, forecast) {
    var clearPadPropertyBank = [
        {
            instrument: 'alienpad',
            startOctave: auxf.getRandomNum(2, 4, 0),
            minOct: 2,
            maxOct: 5,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(1, 2, 0) + 'n',
            // interval: auxf.getRandomNum(2, 4, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.6, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'bond',
            startOctave: auxf.getRandomNum(2, 4, 0),
            minOct: 2,
            maxOct: 4,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'citylight',
            startOctave: auxf.getRandomNum(2, 4, 0),
            minOct: 2,
            maxOct: 4,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.35, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'emotpad',
            startOctave: auxf.getRandomNum(2, 3, 0),
            minOct: 2,
            maxOct: 4,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(1, 2, 0) + 'm',
            // interval: '1n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'mysticrift',
            startOctave: auxf.getRandomNum(1, 3, 0),
            minOct: 1,
            maxOct: 4,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'philia',
            startOctave: auxf.getRandomNum(1, 3, 0),
            minOct: 1,
            maxOct: 4,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.7,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'gloria',
            startOctave: auxf.getRandomNum(3, 4, 0),
            minOct: 3,
            maxOct: 5,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'puro',
            startOctave: auxf.getRandomNum(4, 5, 0),
            minOct: 4,
            maxOct: 6,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'canny',
            startOctave: auxf.getRandomNum(2, 3, 0),
            minOct: 2,
            maxOct: 4,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'discovery',
            startOctave: auxf.getRandomNum(2, 3, 0),
            minOct: 2,
            maxOct: 4,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        }
    ];
    
    var cloudyPadPropertyBank = [
        {
            instrument: 'bloom',
            startOctave: auxf.getRandomNum(2, 3, 0),
            minOct: 2,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.35, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'compass',
            startOctave: auxf.getRandomNum(1, 2, 0),
            minOct: 1,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.8, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'pingwoopad',
            startOctave: auxf.getRandomNum(2, 3, 0),
            minOct: 2,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.35, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'snakeflute',
            startOctave: auxf.getRandomNum(1, 2, 0),
            minOct: 1,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'indianow',
            startOctave: auxf.getRandomNum(2, 3, 0),
            minOct: 2,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'bubkes',
            startOctave: auxf.getRandomNum(1, 2, 0),
            minOct: 1,
            maxOct: 2,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'embrace',
            startOctave: auxf.getRandomNum(2, 3, 0),
            minOct: 2,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'tubechoir',
            startOctave: auxf.getRandomNum(2, 4, 0),
            minOct: 2,
            maxOct: 4,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'coastline',
            startOctave: auxf.getRandomNum(1, 3, 0),
            minOct: 1,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'elfpresence',
            startOctave: auxf.getRandomNum(2, 3, 0),
            minOct: 2,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        }
    ];
    
    var heavyPadPropertyBank = [
        {
            instrument: 'held',
            startOctave: auxf.getRandomNum(1, 2, 0),
            minOct: 1,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'lightfog',
            startOctave: auxf.getRandomNum(1, 2, 0),
            minOct: 1,
            maxOct: 2,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.45, 2),
            maxGain: 0.7,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'darkwarmth',
            startOctave: auxf.getRandomNum(1, 2, 0),
            minOct: 1,
            maxOct: 2,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'rustybells',
            startOctave: auxf.getRandomNum(2, 3, 0),
            minOct: 2,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'endeavour',
            startOctave: auxf.getRandomNum(2, 3, 0),
            minOct: 2,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'rustybells',
            startOctave: auxf.getRandomNum(2, 3, 0),
            minOct: 2,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'synthetichell',
            startOctave: auxf.getRandomNum(3, 4, 0),
            minOct: 3,
            maxOct: 4,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'junerush',
            startOctave: auxf.getRandomNum(1, 2, 0),
            minOct: 1,
            maxOct: 2,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'descend',
            startOctave: auxf.getRandomNum(2, 3, 0),
            minOct: 2,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'hollowed',
            startOctave: auxf.getRandomNum(1, 2, 0),
            minOct: 1,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        }
    ];
    
    var neutralPadPropertyBank = [
        {
            instrument: 'brokenstring',
            startOctave: auxf.getRandomNum(2, 4, 0),
            minOct: 2,
            maxOct: 4,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.8, 2),     
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'violin',
            startOctave: auxf.getRandomNum(2, 4, 0),
            minOct: 2,
            maxOct: 4,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(1, 2, 0) + 'n',
            // interval: auxf.getRandomNum(2, 4, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'spiritwash',
            startOctave: auxf.getRandomNum(1, 3, 0),
            minOct: 1,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'clarinet',
            startOctave: auxf.getRandomNum(2, 3, 0),
            minOct: 2,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.4, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'densemarimba',
            startOctave: auxf.getRandomNum(2, 3, 0),
            minOct: 2,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.4, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'flutesolo',
            startOctave: auxf.getRandomNum(3, 4, 0),
            minOct: 3,
            maxOct: 4,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.4, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        {
            instrument: 'harp',
            startOctave: auxf.getRandomNum(3, 4, 0),
            minOct: 3,
            maxOct: 4,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.4, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(20, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: 0.005, //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
        },
        // {
        //     instrument: 'grandpiano',
        //     startOctave: auxf.getRandomNum(3, 5, 0),
        //     minOct: 3,
        //     maxOct: 5,
        //     maxRelease: auxf.getRandomNum(2, 10, 0),
        //     noteLength: auxf.getRandomNum(1, 4, 0) + 'n',
        //     interval: auxf.getRandomNum(1, 4, 0) + 'n',
        //     mainGain: auxf.getRandomNum(0.1, 0.4, 2),
        //     maxGain: 0.8,
        //     reverbValue: auxf.getRandomNum(0.1, 0.5, 1),
        //     pSilence: auxf.getRandomNum(10, 40, 0),
        //     numOfSteps: auxf.getRandomfromArray(possibleSteps),
        //     gainDamp: auxf.getRandomfromArray(possibleDamps), //0.002,
        //     direction: -1
        // },
        // {
        //     instrument: 'analomagous',
        //     startOctave: auxf.getRandomNum(2, 3, 0),
        //     minOct: 2,
        //     maxOct: 3,
        //     maxRelease: auxf.getRandomNum(1, 10, 0),
        //     noteLength: auxf.getRandomNum(1, 8, 0) + 'n',
        //     interval: auxf.getRandomNum(2, 4, 0) + 'n',
        //     mainGain: auxf.getRandomNum(0.3, 0.7, 2),
        //     maxGain: 0.8,
        //     reverbValue: auxf.getRandomNum(0.1, 1, 1),
        //     pSilence: auxf.getRandomNum(10, 40, 0),
        //     numOfSteps: auxf.getRandomfromArray(possibleSteps),
        //     gainDamp: auxf.getRandomfromArray(possibleDamps), //0.002,
        //     direction: -1
        // },
        // {
        //     instrument: 'earth',
        //     startOctave: auxf.getRandomNum(2, 3, 0),
        //     minOct: 2,
        //     maxOct: 3,
        //     maxRelease: auxf.getRandomNum(1, 10, 0),
        //     noteLength: auxf.getRandomNum(1, 8, 0) + 'm',
        //     interval: auxf.getRandomNum(2, 4, 0) + 'n',
        //     mainGain: auxf.getRandomNum(0.3, 0.5, 2),
        //     maxGain: 0.8,
        //     reverbValue: auxf.getRandomNum(0.1, 1, 1),
        //     pSilence: auxf.getRandomNum(10, 40, 0),
        //     numOfSteps: auxf.getRandomfromArray(possibleSteps),
        //     gainDamp: auxf.getRandomfromArray(possibleDamps), //0.002,
        //     direction: -1
        // },
        // {
        //     instrument: 'pyk',
        //     startOctave: auxf.getRandomNum(2, 3, 0),
        //     minOct: 2,
        //     maxOct: 3,
        //     maxRelease: auxf.getRandomNum(1, 10, 0),
        //     noteLength: auxf.getRandomNum(1, 8, 0) + 'm',
        //     interval: auxf.getRandomNum(2, 4, 0) + 'n',
        //     mainGain: auxf.getRandomNum(0.1, 0.4, 2),
        //     maxGain: 0.8,
        //     reverbValue: auxf.getRandomNum(0.1, 1, 1),
        //     pSilence: auxf.getRandomNum(10, 40, 0),
        //     numOfSteps: auxf.getRandomfromArray(possibleSteps),
        //     gainDamp: auxf.getRandomfromArray(possibleDamps), //0.002,
        //     direction: -1
        // },
        // {
        //     instrument: 'wiccle',
        //     startOctave: auxf.getRandomNum(3, 4, 0),
        //     minOct: 3,
        //     maxOct: 4,
        //     maxRelease: auxf.getRandomNum(1, 10, 0),
        //     noteLength: auxf.getRandomNum(1, 8, 0) + 'm',
        //     interval: auxf.getRandomNum(2, 4, 0) + 'n',
        //     mainGain: auxf.getRandomNum(0.3, 0.5, 2),
        //     maxGain: 0.8,
        //     reverbValue: auxf.getRandomNum(0.1, 1, 1),
        //     pSilence: auxf.getRandomNum(10, 40, 0),
        //     numOfSteps: auxf.getRandomfromArray(possibleSteps),
        //     gainDamp: auxf.getRandomfromArray(possibleDamps), //0.002,
        //     direction: -1
        // }
    ];
    
    var bassPropertyBank = [
        {
            instrument: 'deepbass',
            startOctave: 1,
            minOct: 1,
            maxOct: 1,
            maxRelease: 10,
            noteLength: '64m',
            interval: '2m',
            mainGain: auxf.getRandomNum(0.5, 0.7, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(5, 15, 0),
            numOfSteps: auxf.getRandomfromArray(possibleSteps),
            gainDamp: 0.01, //0.001,
            direction: 1,
        }
    ];

    if (layerNumber == 3) {
        return auxf.getRandomfromArray(bassPropertyBank);
    } else if (forecast == 'Clear') {
        return auxf.getRandomfromArray(clearPadPropertyBank.concat(neutralPadPropertyBank));
    } else if (forecast == 'Clouds') {
        return auxf.getRandomfromArray(cloudyPadPropertyBank.concat(neutralPadPropertyBank));
    } else if (rainForecast.includes(forecast)) {
        return auxf.getRandomfromArray(heavyPadPropertyBank.concat(cloudyPadPropertyBank, neutralPadPropertyBank));
    } else if (forecast == 'Snow') {
        return auxf.getRandomfromArray(clearPadPropertyBank.concat(neutralPadPropertyBank));
    } else {
        return auxf.getRandomfromArray(heavyPadPropertyBank.concat(clearPadPropertyBank, neutralPadPropertyBank));
    }
    //return auxf.getRandomfromArray(padPropertyBank);
    //return auxf.getRandomfromArray(synthPropertyBank.concat(padPropertyBank));
    //return padPropertyBank[padPropertyBank.length - 1];
}