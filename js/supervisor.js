import * as auxf from './auxFunctions.js';

var possibleSteps = [8, 16, 32];
var possibleStepsLarge = [16, 32];
var possibleDamps = [0.01, 0.008, 0.006];
var possibleInterval = ['4n','4n','4n','4n','4n','3n'];

var clearArray, cloudsArray, heavyArray, otherArray;

var rainForecast = ['Rain', 'Drizzle', 'Thunderstorm', 'Tornado']; 

export function instrumentDecider(layerNumber, forecast, neutralExists) {
    var clearPadPropertyBank = [
        {
            instrument: 'alienpad',
            startOctave: [2, 3, 4],
            minOct: 2,
            maxOct: 5,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(1, 2, 0) + 'n',
            // interval: auxf.getRandomNum(2, 4, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.3, 0.5, 2),
            maxGain: 0.7,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'clear'
        },
        {
            instrument: 'bond',
            startOctave: [2, 3],
            minOct: 2,
            maxOct: 4,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'clear'
        },
        {
            instrument: 'citylight',
            startOctave: [2, 3, 4],
            minOct: 2,
            maxOct: 5,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.35, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'clear'
        },
        {
            instrument: 'emotpad',
            startOctave: [2, 3],
            minOct: 2,
            maxOct: 4,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(1, 2, 0) + 'm',
            // interval: '1n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'clear'
        },
        {
            instrument: 'gloria',
            startOctave: [3, 4],
            minOct: 3,
            maxOct: 4,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'clear'
        },
        {
            instrument: 'puro',
            startOctave: [4, 5],
            minOct: 4,
            maxOct: 6,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'clear'
        },
        {
            instrument: 'discovery',
            startOctave: [2, 3, 4],
            minOct: 2,
            maxOct: 5,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.3, 2),
            maxGain: 0.4,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'clear'
        },
        {
            instrument: 'canny',
            startOctave: [2, 3],
            minOct: 1,
            maxOct: 4,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.2, 0.5, 2),
            maxGain: 0.6,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'clear'
        },
        {
            instrument: 'mysticrift',
            startOctave: [1, 2],
            minOct: 1,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.4, 0.6, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'clear'
        }
    ];
    
    var cloudyPadPropertyBank = [
        {
            instrument: 'bloom',
            startOctave: [2, 3],
            minOct: 2,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.35, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'cloudy'
        },
        {
            instrument: 'pingwoo',
            startOctave: [2, 3],
            minOct: 2,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.35, 2),
            maxGain: 0.5,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'cloudy'
        },
        {
            instrument: 'snakeflute',
            startOctave: [1, 2],
            minOct: 1,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.7,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'cloudy'
        },
        {
            instrument: 'bubkes',
            startOctave: [1, 2],
            minOct: 1,
            maxOct: 2,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'cloudy'
        },
        {
            instrument: 'embrace',
            startOctave: [2, 3],
            minOct: 2,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'cloudy'
        },
        {
            instrument: 'tubechoir',
            startOctave: [2, 3, 4],
            minOct: 2,
            maxOct: 4,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'cloudy'
        },
        {
            instrument: 'elfpresence',
            startOctave: [1, 2, 3],
            minOct: 1,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'cloudy'
        }
    ];
    
    var heavyPadPropertyBank = [
        {
            instrument: 'held',
            startOctave: [1, 2],
            minOct: 1,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'heavy'
        },
        {
            instrument: 'rustybells',
            startOctave: [1, 2],
            minOct: 1,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.6,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'heavy'
        },
        {
            instrument: 'endeavour',
            startOctave: [2, 3],
            minOct: 2,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'heavy'
        },
        {
            instrument: 'junerush',
            startOctave: [1, 2],
            minOct: 1,
            maxOct: 2,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(8, 16, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'heavy'
        },
        {
            instrument: 'descend',
            startOctave: [2, 3],
            minOct: 2,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'heavy'
        },
        {
            instrument: 'hollowed',
            startOctave: [1, 2, 3],
            minOct: 1,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'heavy'
        },
        {
            instrument: 'philia',
            startOctave: [2, 3],
            minOct: 2,
            maxOct: 4,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.35, 2),
            maxGain: 0.5,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(50, 70, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'clear'
        },
        {
            instrument: 'cryptolush',
            startOctave: [2, 3],
            minOct: 2,
            maxOct: 4,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.35, 2),
            maxGain: 0.5,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(50, 70, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'clear'
        }
    ];
    
    var neutralPadPropertyBank = [
        {
            instrument: 'brokenstring',
            startOctave: [2, 3],
            minOct: 2,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.8, 2),     
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'neutral'
        },
        {
            instrument: 'violin',
            startOctave: [2, 3, 4],
            minOct: 2,
            maxOct: 4,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(1, 2, 0) + 'n',
            // interval: auxf.getRandomNum(2, 4, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.6,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'neutral'
        },
        {
            instrument: 'spiritwash',
            startOctave: [1, 2, 3],
            minOct: 1,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.55, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'neutral'
        },
        {
            instrument: 'marimba',
            startOctave: [2, 3],
            minOct: 2,
            maxOct: 3,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.4, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'neutral'
        },
        {
            instrument: 'harp',
            startOctave: [3, 4],
            minOct: 3,
            maxOct: 4,
            maxRelease: 10,
            noteLength: auxf.getRandomNum(4, 8, 0) + 'm',
            // interval: auxf.getRandomNum(1, 2, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.4, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(30, 60, 0),
            numOfSteps: auxf.getRandomfromArray(possibleStepsLarge),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'neutral'
        },
        {
            instrument: 'grandpiano',
            startOctave: [2, 3, 4],
            minOct: 2,
            maxOct: 4,
            maxRelease: auxf.getRandomNum(2, 10, 0),
            noteLength: auxf.getRandomNum(1, 4, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.4, 2),
            maxGain: 0.8,
            reverbValue: auxf.getRandomNum(0.1, 0.5, 1),
            pSilence: auxf.getRandomNum(10, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleSteps),
            gainDamp: auxf.getRandomfromArray(possibleDamps), //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'neutral'
        },
        {
            instrument: 'rhodes',
            startOctave: [1, 2, 3, 4],
            minOct: 1,
            maxOct: 4,
            maxRelease: auxf.getRandomNum(2, 10, 0),
            noteLength: auxf.getRandomNum(1, 4, 0) + 'n',
            interval: auxf.getRandomfromArray(possibleInterval),
            mainGain: auxf.getRandomNum(0.1, 0.4, 2),
            maxGain: 0.8,
            reverbValue: auxf.getRandomNum(0.1, 0.5, 1),
            pSilence: auxf.getRandomNum(10, 40, 0),
            numOfSteps: auxf.getRandomfromArray(possibleSteps),
            gainDamp: auxf.getRandomfromArray(possibleDamps), //0.002,
            direction: auxf.getRandomfromArray([-1,1]),
            type: 'neutral'
        }
    ];
    
    var bassPropertyBank = [
        {
            instrument: 'deepbass',
            startOctave: [1],
            minOct: 1,
            maxOct: 1,
            maxRelease: 10,
            noteLength: '16m',
            interval: '2m',
            mainGain: auxf.getRandomNum(0.6, 0.7, 2),
            maxGain: 0.8,
            reverbValue: 1,
            pSilence: auxf.getRandomNum(5, 10, 0),
            numOfSteps: auxf.getRandomfromArray(possibleSteps),
            gainDamp: auxf.getRandomfromArray(possibleDamps),
            direction: 1,
            type: 'bass'
        }
    ];

    switch (neutralExists){
        case false:
            clearArray = clearPadPropertyBank.concat(neutralPadPropertyBank);
            cloudsArray = cloudyPadPropertyBank.concat(neutralPadPropertyBank);
            heavyArray = heavyPadPropertyBank.concat(cloudyPadPropertyBank, neutralPadPropertyBank);
            otherArray = heavyPadPropertyBank.concat(clearPadPropertyBank, neutralPadPropertyBank);
            break;
        case true:
            clearArray = clearPadPropertyBank;
            cloudsArray = cloudyPadPropertyBank;
            heavyArray = heavyPadPropertyBank.concat(cloudyPadPropertyBank);
            otherArray = heavyPadPropertyBank.concat(clearPadPropertyBank);
            break;
    }
    if (layerNumber == 3) {
        return auxf.getRandomfromArray(bassPropertyBank)
        //return neutralPadPropertyBank[neutralPadPropertyBank.length - 1];
    } else if (forecast == 'Clear' || forecast == 'Snow') {
        return auxf.getRandomfromArray(clearArray)
    } else if (forecast == 'Clouds') {
        return auxf.getRandomfromArray(cloudsArray)
    } else if (rainForecast.includes(forecast)) {
        return auxf.getRandomfromArray(heavyArray)
    } else {
        return auxf.getRandomfromArray(otherArray)
    }
}